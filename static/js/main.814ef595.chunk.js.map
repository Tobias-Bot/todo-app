{"version":3,"sources":["pics/logo.png","components/Task.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Task","props","state","title","task","description","color","isImportant","colorInput","React","createRef","taskText","taskTitle","deleteTask","bind","ChangeTitle","ChangeColor","changeStatus","colorInputClick","ChangeDescription","this","current","click","e","target","value","setState","onTaskChange","index","onTaskDelete","taskColor","backgroundColor","star","className","style","placeholder","rows","ref","onChange","onClick","type","hidden","Component","TodoList","tasks","splice","showImportant","theme","items","createNewTask","UpdateTask","showTasks","renderTasks","turnSwitcher","sortTasksByImportant","getFromDB","store","key","localStorage","getItem","setItem","StoreData","data","updateDB","obj","openRequest","indexedDB","open","onupgradeneeded","DB","result","objectStoreNames","contains","createObjectStore","onerror","console","error","onsuccess","transaction","objectStore","put","tx","get","oncomplete","arr","prevState","map","item","i","important","info","filter","length","switcher","appTheme","el","log","id","tabIndex","role","aria-labelledby","aria-hidden","data-dismiss","aria-label","src","logo","alt","href","data-toggle","data-target","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.814ef595.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.c88cdb0e.png\";","import React from \"react\";\r\n\r\nclass Task extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      title: this.props.task.title,\r\n      description: this.props.task.description,\r\n      color: this.props.task.color,\r\n      isImportant: this.props.task.isImportant,\r\n    };\r\n\r\n    this.colorInput = React.createRef();\r\n    this.taskText = React.createRef();\r\n    this.taskTitle = React.createRef();\r\n\r\n    this.deleteTask = this.deleteTask.bind(this);\r\n    this.ChangeTitle = this.ChangeTitle.bind(this);\r\n    this.ChangeColor = this.ChangeColor.bind(this);\r\n    this.changeStatus = this.changeStatus.bind(this);\r\n    this.colorInputClick = this.colorInputClick.bind(this);\r\n    this.ChangeDescription = this.ChangeDescription.bind(this);\r\n  }\r\n\r\n  // componentDidUpdate() {\r\n  //   this.taskTitle.current.value = this.props.task.title;\r\n  //   this.taskText.current.value = this.props.task.description;\r\n  // }\r\n\r\n  colorInputClick() {\r\n    this.colorInput.current.click();\r\n  }\r\n\r\n  ChangeTitle(e) {\r\n    let state = {\r\n      title: e.target.value,\r\n      description: this.props.task.description,\r\n      color: this.props.task.color,\r\n      isImportant: this.props.task.isImportant,\r\n    }\r\n\r\n    this.setState(state, () => {\r\n      this.props.onTaskChange(this.state, this.props.index);\r\n    });\r\n  }\r\n\r\n  ChangeDescription(e) {\r\n    let state = {\r\n      title: this.props.task.title,\r\n      description: e.target.value,\r\n      color: this.props.task.color,\r\n      isImportant: this.props.task.isImportant,\r\n    }\r\n\r\n    this.setState(state, () => {\r\n      this.props.onTaskChange(this.state, this.props.index);\r\n    });\r\n  }\r\n\r\n  ChangeColor(e) {\r\n    let state = {\r\n      title: this.props.task.title,\r\n      description: this.props.task.description,\r\n      color: e.target.value,\r\n      isImportant: this.props.task.isImportant,\r\n    }\r\n\r\n    this.setState(state, () => {\r\n      this.props.onTaskChange(this.state, this.props.index);\r\n    });\r\n  }\r\n\r\n  changeStatus() {\r\n    let state = {\r\n      title: this.props.task.title,\r\n      description: this.props.task.description,\r\n      color: this.props.task.color,\r\n      isImportant: !this.props.task.isImportant,\r\n    }\r\n\r\n    this.setState(state, () => {\r\n      this.props.onTaskChange(this.state, this.props.index);\r\n    });\r\n  }\r\n\r\n  deleteTask() {\r\n    this.props.onTaskDelete(this.props.index);\r\n  }\r\n\r\n  render() {\r\n    const taskColor = {\r\n      backgroundColor: this.props.task.color,\r\n    };\r\n\r\n    let isImportant = this.props.task.isImportant;\r\n\r\n    const star = isImportant ? (\r\n      <i className=\"fas fa-star\"></i>\r\n    ) : (\r\n      <i className=\"far fa-star\"></i>\r\n    );\r\n\r\n    return (\r\n      <div className=\"task\" style={taskColor}>\r\n        <div className=\"taskMainInfo\">\r\n          <textarea\r\n            className=\"taskTitle\"\r\n            placeholder=\"Заголовок\"\r\n            rows=\"2\"\r\n            ref={this.taskTitle}\r\n            value={this.props.task.title}\r\n            onChange={this.ChangeTitle}\r\n          ></textarea>\r\n          <textarea\r\n            className=\"taskText\"\r\n            placeholder=\"Нет описания\"\r\n            rows=\"4\"\r\n            ref={this.taskText}\r\n            value={this.props.task.description}\r\n            onChange={this.ChangeDescription}\r\n          ></textarea>\r\n        </div>\r\n        <div className=\"taskSettings\">\r\n          <div className=\"btnOption\" onClick={this.deleteTask}>\r\n            <i className=\"fas fa-times-circle\"></i>\r\n          </div>\r\n          <div className=\"btnOption\" onClick={this.colorInputClick}>\r\n            <i className=\"fas fa-palette\"></i>\r\n          </div>\r\n          <div className=\"btnOption\" onClick={this.changeStatus}>\r\n            {star}\r\n          </div>\r\n          <input\r\n            type=\"color\"\r\n            ref={this.colorInput}\r\n            hidden={true}\r\n            onChange={this.ChangeColor}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Task;\r\n","import React from \"react\";\r\n\r\nimport Task from \"./Task.js\";\r\n\r\nimport logo from \"../pics/logo.png\";\r\n\r\nclass TodoList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { tasks: [], showImportant: false, theme: \"white\" };\r\n\r\n    this.items = [];\r\n\r\n    // Эта привязка обязательна для работы `this` в колбэке.\r\n    this.createNewTask = this.createNewTask.bind(this);\r\n    this.UpdateTask = this.UpdateTask.bind(this);\r\n    this.showTasks = this.showTasks.bind(this);\r\n    this.renderTasks = this.renderTasks.bind(this);\r\n    this.turnSwitcher = this.turnSwitcher.bind(this);\r\n    //this.Sasha = this.Sasha.bind(this);\r\n    this.sortTasksByImportant = this.sortTasksByImportant.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    // let funcs = {\r\n    //   'Mark': function(name) {\r\n    //     console.log(`func ${name} is running`);\r\n    //   }\r\n    // }\r\n\r\n    // window.addEventListener(\"message\", function(event) {\r\n    //   console.log(\"received: \" + event.data.name);\r\n\r\n    //   let func = event.data.name\r\n\r\n    //   funcs[func](func);\r\n\r\n    //   event.data.name = 'Sasha [updated]';\r\n\r\n    //   window.top.postMessage(event.data, '*');\r\n    // });\r\n\r\n    /* getting tasks */\r\n\r\n    this.getFromDB({ store: \"ToDoList\", key: \"tasks\" });\r\n\r\n    /* getting app's theme */\r\n\r\n    let theme = localStorage.getItem(\"AppTheme\");\r\n\r\n    this.setState((state) => {\r\n      return {\r\n        theme,\r\n      };\r\n    });\r\n  }\r\n\r\n  turnSwitcher() {\r\n    let theme = this.state.theme;\r\n\r\n    theme = theme === \"black\" ? \"white\" : \"black\";\r\n\r\n    this.setState((state) => {\r\n      return {\r\n        theme,\r\n      };\r\n    });\r\n\r\n    localStorage.setItem(\"AppTheme\", theme);\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    let data = this.state.tasks;\r\n\r\n    let StoreData = {\r\n      store: \"ToDoList\",\r\n      key: \"tasks\",\r\n      data,\r\n    };\r\n\r\n    this.updateDB(StoreData);\r\n  }\r\n\r\n  updateDB(obj) {\r\n    let openRequest = indexedDB.open(obj.store, 1);\r\n\r\n    openRequest.onupgradeneeded = () => {\r\n      let DB = openRequest.result;\r\n      if (!DB.objectStoreNames.contains(obj.store)) {\r\n        DB.createObjectStore(obj.store);\r\n      }\r\n    };\r\n\r\n    openRequest.onerror = function () {\r\n      console.error(\"Can't create DB\", openRequest.error);\r\n    };\r\n\r\n    openRequest.onsuccess = () => {\r\n      let DB = openRequest.result;\r\n\r\n      let tx = DB.transaction(obj.store, \"readwrite\");\r\n      let store = tx.objectStore(obj.store);\r\n\r\n      store.put(obj.data, obj.key);\r\n    };\r\n  }\r\n\r\n  getFromDB(obj) {\r\n    let openRequest = indexedDB.open(obj.store, 1);\r\n\r\n    openRequest.onupgradeneeded = () => {\r\n      let DB = openRequest.result;\r\n      if (!DB.objectStoreNames.contains(obj.store)) {\r\n        DB.createObjectStore(obj.store);\r\n      }\r\n    };\r\n\r\n    openRequest.onerror = function () {\r\n      console.error(\"Can't create DB\", openRequest.error);\r\n    };\r\n\r\n    openRequest.onsuccess = () => {\r\n      let DB = openRequest.result;\r\n\r\n      let tx = DB.transaction(obj.store, \"readonly\");\r\n      let store = tx.objectStore(obj.store);\r\n\r\n      let tasks = store.get(obj.key);\r\n\r\n      tx.oncomplete = () => {\r\n        if (tasks.result) {\r\n          this.setState({ tasks: tasks.result });\r\n          this.tasks = tasks.result;\r\n        }\r\n      };\r\n    };\r\n  }\r\n\r\n  createNewTask() {\r\n    let arr = [\r\n      {\r\n        title: \"\",\r\n        description: \"\",\r\n        color: \"#fff\",\r\n        isImportant: this.state.showImportant,\r\n      },\r\n    ];\r\n\r\n    this.setState((prevState) => {\r\n      return { tasks: [...prevState.tasks, ...arr] };\r\n    });\r\n  }\r\n\r\n  UpdateTask(task, index) {\r\n    let tasks = this.state.tasks;\r\n\r\n    tasks[index] = task;\r\n\r\n    this.setState({ tasks });\r\n  }\r\n\r\n  deleteTask = (index) => {\r\n    let tasks = this.state.tasks;\r\n    tasks.splice(index, 1);\r\n\r\n    this.setState({ tasks });\r\n  };\r\n\r\n  sortTasksByImportant() {\r\n    this.items = this.state.tasks.map((item, i) => {\r\n      return (\r\n        item.isImportant && (\r\n          <Task\r\n            key={i}\r\n            task={item}\r\n            index={i}\r\n            onTaskChange={this.UpdateTask}\r\n            onTaskDelete={this.deleteTask}\r\n          ></Task>\r\n        )\r\n      );\r\n    });\r\n  }\r\n\r\n  showTasks() {\r\n    this.items = this.state.tasks.map((item, i) => {\r\n      return (\r\n        <Task\r\n          key={i}\r\n          task={item}\r\n          index={i}\r\n          onTaskChange={this.UpdateTask}\r\n          onTaskDelete={this.deleteTask}\r\n        ></Task>\r\n      );\r\n    });\r\n  }\r\n\r\n  renderTasks() {\r\n    let important = this.state.showImportant;\r\n\r\n    this.setState({ showImportant: !important });\r\n  }\r\n\r\n  render() {\r\n    let star = \"\";\r\n    let important = this.state.showImportant;\r\n    let info = \"\";\r\n\r\n    /* sorting posts */\r\n\r\n    if (important) {\r\n      this.sortTasksByImportant();\r\n      info = (\r\n        <span>\r\n          важные: <b>{this.items.filter((item) => item).length}</b>\r\n        </span>\r\n      );\r\n      star = <i className=\"fas fa-star\"></i>;\r\n    } else {\r\n      this.showTasks();\r\n      info = (\r\n        <span>\r\n          заметки: <b>{this.items.length}</b>\r\n        </span>\r\n      );\r\n      star = <i className=\"far fa-star\"></i>;\r\n    }\r\n\r\n    /* setting theme switcher position */\r\n\r\n    let theme = this.state.theme;\r\n\r\n    let switcher =\r\n      this.state.theme === \"black\" ? (\r\n        <i className=\"fas fa-toggle-on\"></i>\r\n      ) : (\r\n        <i className=\"fas fa-toggle-off\"></i>\r\n      );\r\n\r\n    /* setting app's theme */\r\n\r\n    let appTheme = [\"BackGround\", \"infoBar\", \"logoText\", \"source\", \"mainBtns\"];\r\n\r\n    if (theme === \"black\") appTheme = appTheme.map((el) => `${el} ${el}Black`);\r\n\r\n    console.log(appTheme);\r\n\r\n    return (\r\n      <div>\r\n        <div\r\n          className=\"modal fade\"\r\n          id=\"InfoModal\"\r\n          tabIndex=\"-1\"\r\n          role=\"dialog\"\r\n          aria-labelledby=\"exampleModalLabel\"\r\n          aria-hidden=\"true\"\r\n        >\r\n          <div className=\"modal-dialog modal-dialog-centered modal-dialog-scrollable\">\r\n            <div className=\"modal-content\">\r\n              <div className=\"modal-header\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"close\"\r\n                  data-dismiss=\"modal\"\r\n                  aria-label=\"Close\"\r\n                >\r\n                  <span aria-hidden=\"true\">&times;</span>\r\n                </button>\r\n              </div>\r\n              <div className=\"modal-body\">\r\n                <div className=\"InfoBackground\">\r\n                  Сделано с ❤ в паблике Май\r\n                  <br />\r\n                  <br />\r\n                  <img className=\"logo\" src={logo} alt=\"May logo\" />\r\n                  <br />\r\n                  <br />\r\n                  <br />\r\n                  <br />\r\n                  Проблемы с приложением, хочешь предложить что-то поменять или\r\n                  просто с нами поболтать? Напиши нам!\r\n                  <br />\r\n                  <br />\r\n                  <button className=\"btnGoToMay\">\r\n                    <a\r\n                      className=\"linkInBtn\"\r\n                      href=\"https://vk.com/im?sel=-160404048\"\r\n                    >\r\n                      написать\r\n                    </a>\r\n                  </button>\r\n                  <br />\r\n                  <br />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className={appTheme[0]}>\r\n          <div className={appTheme[1]}>\r\n            {info}\r\n            <div className=\"ThemeSwitcher\" onClick={this.turnSwitcher}>\r\n              {switcher}\r\n            </div>\r\n          </div>\r\n          <div className=\"TaskList\">{this.items}</div>\r\n          <div className={appTheme[4]}>\r\n            <div\r\n              className=\"btnMains\"\r\n              data-toggle=\"modal\"\r\n              data-target=\"#InfoModal\"\r\n            >\r\n              <i className=\"fas fa-info\"></i>\r\n            </div>\r\n            <div className=\"btnMains\" onClick={this.renderTasks}>\r\n              {star}\r\n            </div>\r\n            <div className=\"btnMains\" onClick={this.createNewTask}>\r\n              <i className=\"fas fa-plus\"></i>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoList;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport TodoList from \"./components/TodoList.js\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <TodoList></TodoList>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}